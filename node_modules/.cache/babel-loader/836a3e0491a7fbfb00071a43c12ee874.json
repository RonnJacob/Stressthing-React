{"ast":null,"code":"import _classCallCheck from \"/Users/ronn/Desktop/HackUMass/StressThing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { FETCH_URL } from \"../utils/constants\";\n\nvar RecipeServices = function RecipeServices() {\n  _classCallCheck(this, RecipeServices);\n\n  this.addRecipe = function (recipe) {\n    return fetch(FETCH_URL + 'recipes', {\n      method: 'post',\n      body: JSON.stringify(recipe),\n      headers: {\n        'content-type': 'application/json'\n      }\n    }).then(function (response) {\n      return response.json();\n    });\n  };\n\n  this.deleteRecipe = function (recipeId) {\n    return fetch(FETCH_URL + 'recipes/' + recipeId, {\n      method: 'delete',\n      headers: {\n        'content-type': 'application/json'\n      }\n    });\n  };\n\n  this.updateRecipe = function (recipeId, recipe) {\n    return fetch(FETCH_URL + 'recipes/' + recipeId, {\n      method: 'put',\n      body: JSON.stringify(recipe),\n      headers: {\n        'content-type': 'application/json'\n      }\n    });\n  };\n\n  this.findRecipeById = function (recipeId) {\n    return fetch(FETCH_URL + 'recipes/' + recipeId).then(function (response) {\n      return response.json();\n    });\n  };\n\n  this.searchRecipeByName = function (recipeName) {\n    return fetch(FETCH_URL + 'recipes/searchRecipe/' + recipeName).then(function (response) {\n      return response.json();\n    });\n  };\n\n  this.findAllRecipes = function () {\n    return fetch(FETCH_URL + 'recipes/').then(function (response) {\n      return response.json();\n    });\n  };\n\n  this.findRecipesByIngredients = function (ingredient) {\n    return fetch(FETCH_URL + 'ingredients/' + ingredient + '/recipes').then(function (response) {\n      return response.json();\n    });\n  };\n};\n\nexport { RecipeServices as default };","map":{"version":3,"sources":["/Users/ronn/Desktop/HackUMass/StressThing/src/services/RecipeServices.js"],"names":["FETCH_URL","RecipeServices","addRecipe","recipe","fetch","method","body","JSON","stringify","headers","then","response","json","deleteRecipe","recipeId","updateRecipe","findRecipeById","searchRecipeByName","recipeName","findAllRecipes","findRecipesByIngredients","ingredient"],"mappings":";AAAA,SAAQA,SAAR,QAAwB,oBAAxB;;IAEqBC,c;;;OAEjBC,S,GAAY,UAAAC,MAAM;AAAA,WAAIC,KAAK,CAACJ,SAAS,GAAG,SAAb,EAAwB;AAC/CK,MAAAA,MAAM,EAAE,MADuC;AAE/CC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,MAAf,CAFyC;AAG/CM,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX;AAHsC,KAAxB,CAAL,CAMnBC,IANmB,CAMd,UAAAC,QAAQ;AAAA,aAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,KANM,CAAJ;AAAA,G;;OAQlBC,Y,GAAe,UAAAC,QAAQ;AAAA,WAAIV,KAAK,CAACJ,SAAS,GAAG,UAAZ,GAAyBc,QAA1B,EAAoC;AAChET,MAAAA,MAAM,EAAE,QADwD;AAEhEI,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX;AAFuD,KAApC,CAAT;AAAA,G;;OAOvBM,Y,GAAe,UAACD,QAAD,EAAWX,MAAX;AAAA,WAAsBC,KAAK,CAACJ,SAAS,GAAG,UAAZ,GAAyBc,QAA1B,EAAoC;AAC1ET,MAAAA,MAAM,EAAE,KADkE;AAE1EC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,MAAf,CAFoE;AAG1EM,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX;AAHiE,KAApC,CAA3B;AAAA,G;;OAUfO,c,GAAiB,UAAAF,QAAQ;AAAA,WACrBV,KAAK,CAACJ,SAAS,GAAG,UAAZ,GAAyBc,QAA1B,CAAL,CAAyCJ,IAAzC,CAA8C,UAAAC,QAAQ;AAAA,aAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,KAAtD,CADqB;AAAA,G;;OAGzBK,kB,GAAqB,UAAAC,UAAU;AAAA,WAC3Bd,KAAK,CAACJ,SAAS,GAAG,uBAAZ,GAAsCkB,UAAvC,CAAL,CAAwDR,IAAxD,CAA6D,UAAAC,QAAQ;AAAA,aAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,KAArE,CAD2B;AAAA,G;;OAG/BO,c,GAAiB;AAAA,WACbf,KAAK,CAACJ,SAAS,GAAG,UAAb,CAAL,CAA8BU,IAA9B,CAAmC,UAAAC,QAAQ;AAAA,aAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,KAA3C,CADa;AAAA,G;;OAGjBQ,wB,GAAyB,UAACC,UAAD;AAAA,WACrBjB,KAAK,CAACJ,SAAS,GAAG,cAAZ,GAA6BqB,UAA7B,GAAwC,UAAzC,CAAL,CAA0DX,IAA1D,CAA+D,UAAAC,QAAQ;AAAA,aAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,KAAvE,CADqB;AAAA,G;;;SApCRX,c","sourcesContent":["import {FETCH_URL} from \"../utils/constants\";\n\nexport default class RecipeServices {\n\n    addRecipe = recipe => fetch(FETCH_URL + 'recipes', {\n        method: 'post',\n        body: JSON.stringify(recipe),\n        headers: {\n            'content-type': 'application/json'\n        }\n    }).then(response => response.json());\n\n    deleteRecipe = recipeId => fetch(FETCH_URL + 'recipes/' + recipeId, {\n        method: 'delete',\n        headers: {\n            'content-type': 'application/json'\n        }\n    })\n\n    updateRecipe = (recipeId, recipe) => fetch(FETCH_URL + 'recipes/' + recipeId, {\n        method: 'put',\n        body: JSON.stringify(recipe),\n        headers: {\n            'content-type': 'application/json'\n        }\n    });\n\n\n\n    findRecipeById = recipeId =>\n        fetch(FETCH_URL + 'recipes/' + recipeId).then(response => response.json());\n\n    searchRecipeByName = recipeName =>\n        fetch(FETCH_URL + 'recipes/searchRecipe/' + recipeName).then(response => response.json());\n\n    findAllRecipes = () =>\n        fetch(FETCH_URL + 'recipes/').then(response => response.json());\n\n    findRecipesByIngredients=(ingredient)=>\n        fetch(FETCH_URL + 'ingredients/' + ingredient+'/recipes').then(response => response.json());\n}\n"]},"metadata":{},"sourceType":"module"}